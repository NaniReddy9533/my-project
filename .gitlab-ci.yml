stages:
  - build
  - test
  - deploy

variables:
  AWS_DEFAULT_REGION: "us-east-2"
  AWS_ACCESS_KEY_ID: "AKIA4MTWKUQ3S6MMOSGS"
  AWS_SECRET_ACCESS_KEY: "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"
  ECR_REPO_URL: "public.ecr.aws/f2s4m0c9/docker-poc"

build:
  stage: build
  script:
    - docker build -t my_image . || exit 1  # Build the Docker image, exit if failed
    - docker save my_image | gzip > my_image.tar.gz || exit 1  # Save and compress the Docker image, exit if failed
  artifacts:
    paths:
      - my_image.tar.gz  # Make the compressed tarball artifact available for later stages

test:
  stage: test
  script:
    - gunzip -c my_image.tar.gz | docker load || exit 1  # Load the compressed Docker image from the tarball, exit if failed
    - docker run my_image npm test || exit 1  # Run tests inside a container, exit if failed

deploy:
  stage: deploy
  script:
    - gunzip -c my_image.tar.gz | docker load || exit 1  # Load the compressed Docker image from the tarball, exit if failed
    # Authenticate with ECR
    - $(aws ecr get-login --no-include-email)
    # Tag the Docker image with the ECR repository URL
    - docker tag my_image $ECR_REPO_URL/my_image:latest
    # Push the Docker image to ECR
    - docker push $ECR_REPO_URL/my_image:latest
  only:
    - master
