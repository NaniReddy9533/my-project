stages:
  - build
  #- test
  - deploy


build:
  stage: build
  script:
    - docker build -t my_image . || exit 1  # Build the Docker image, exit if failed
    - docker save my_image | gzip > my_image.tar.gz || exit 1  # Save and compress the Docker image, exit if failed
  artifacts:
    paths:
      - my_image.tar.gz  # Make the compressed tarball artifact available for later stages

#test:
#  stage: test
#  script:
#    - gunzip -c my_image.tar.gz | docker load || exit 1  # Load the compressed Docker image from the tarball, exit if failed
 #   - docker run my_image npm test || exit 1  # Run tests inside a container, exit if failed

deploy:
  stage: deploy
  script:
    
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/f2s4m0c9
    - docker tag my_image:latest public.ecr.aws/f2s4m0c9/my_image:latest
    - docker push public.ecr.aws/f2s4m0c9/my_image:latest
    - aws eks --region us-west-2 update-kubeconfig --name my_project
    - kubectl apply -f deployment.yaml
    - kubectl apply -f service.yaml
  
